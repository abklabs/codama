{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}

{{ imports }}

/// {{ programName | pascalCase }} Instructions
#[derive(Debug)]
pub enum {{ programName  | pascalCase }}ProgramIx {
    {% for instruction in instructions %}
    {{ instruction.name | pascalCase }}({{ instruction.name | pascalCase }}IxAccounts, {{ instruction.name | pascalCase }}IxData),
    {% endfor %}
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::InstructionUpdate;
    type Output = {{ programName  | pascalCase }}ProgramIx;

    fn id(&self) -> std::borrow::Cow<str> {
        "{{ programName  | pascalCase }}::InstructionParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .program_ids([crate::{{ programName  | snakeCase | upper }}_ID])
            .build()
            .unwrap()
    }

    async fn parse(&self, ix_update: &InstructionUpdate) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(crate::{{ programName  | snakeCase | upper }}_ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        crate::{{ programName | snakeCase | upper }}_ID.to_bytes().into()
    }
}

impl InstructionParser {
    pub(crate) fn parse_impl(ix:&InstructionUpdate) -> yellowstone_vixen_core::ParseResult<{{ programName  | pascalCase }}ProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator:[u8; {{ IX_DATA_OFFSET }}] = ix.data[0..{{ IX_DATA_OFFSET }}].try_into()?;
        let mut ix_data = &ix.data[{{ IX_DATA_OFFSET }}..];

        match ix_discriminator {
            {% for instruction in instructions %}
            {% if instruction.discriminator != null %}
            {{ instruction.discriminator }} => {
                check_min_accounts_req(accounts_len, {{ instruction.accounts | length }})?;
                let de_ix_data:{{ instruction.name | pascalCase }}IxData = BorshDeserilaize::deserialize(&mut ix_data)?;
                let ix_accounts = {{ instruction.name | pascalCase }}IxAccounts{
                    {% for account in instruction.accounts %}
                    {{ account.name | snakeCase }}: ix.accounts[{{ account.index }}],
                    {% endfor %}
                };
                Ok({{ programName  | pascalCase }}ProgramIx::{{ instruction.name | pascalCase }}(ix_accounts, de_ix_data))

               
            },
            {% endif %}
            {% endfor %}
            _ => Err(yellowstone_vixen_core::ParseError::from("Invalid Instruction discriminator".to_owned())),
        }
       
    }

}


{% endblock %}