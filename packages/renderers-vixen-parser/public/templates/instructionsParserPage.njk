{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}

{{ imports }}

/// {{ programName | pascalCase }} Instructions
#[derive(Debug)]
pub enum {{ programName  | pascalCase }}ProgramIx {
    {% for instruction in instructions %}
        {% if instruction.hasArgs %}
            {{ instruction.name | pascalCase }}({{ instruction.name | pascalCase }}IxAccounts, {{ instruction.name | pascalCase }}IxData),
        {% else %}
            {{ instruction.name | pascalCase }}({{ instruction.name | pascalCase }}IxAccounts),
        {% endif %}
    {% endfor %}
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = {{ programName  | pascalCase }}ProgramIx;

    fn id(&self) -> std::borrow::Cow<str> {
        "{{ programName  | pascalCase }}::InstructionParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(&self, ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

impl InstructionParser {
    pub(crate) fn parse_impl(ix:&yellowstone_vixen_core::instruction::InstructionUpdate) -> yellowstone_vixen_core::ParseResult<{{ programName  | pascalCase }}ProgramIx> {
        let accounts_len = ix.accounts.len();
        {% if hasDiscriminator %}
        let ix_discriminator:[u8; {{ IX_DATA_OFFSET }}] = ix.data[0..{{ IX_DATA_OFFSET }}].try_into()?;
        let mut ix_data = &ix.data[{{ IX_DATA_OFFSET }}..];
            match ix_discriminator {
                {% for instruction in instructions %}
                        {% if instruction.discriminator != null %}
                            {{ instruction.discriminator }} => {
                                check_min_accounts_req(accounts_len, {{ instruction.accounts | length }})?;
                                let ix_accounts = {{ instruction.name | pascalCase }}IxAccounts{
                                    {% for account in instruction.accounts %}
                                        {% if account.isOptional %}
                                            {% if instruction.optionalAccountStrategy == 'programId' %}
                                                {{ account.name | snakeCase }}: if ix.accounts[{{ account.index }}]
                                                    .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                                                {
                                                    None
                                                } else {
                                                    Some(ix.accounts[{{ account.index }}].0.into())
                                                },
                                            {% else %}
                                                {{ account.name | snakeCase }}: None
                                            {% endif %}
                                        {% else %}
                                            {{ account.name | snakeCase }}: ix.accounts[{{ account.index }}].0.into(),
                                        {% endif %}
                                    {% endfor %}
                                };
                                {% if instruction.hasArgs %}
                                    let de_ix_data:{{ instruction.name | pascalCase }}IxData = BorshDeserialize::deserialize(&mut ix_data)?;
                                    Ok({{ programName  | pascalCase }}ProgramIx::{{ instruction.name | pascalCase }}(ix_accounts, de_ix_data))
                                {% else %}
                                    Ok({{ programName  | pascalCase }}ProgramIx::{{ instruction.name | pascalCase }}(ix_accounts))
                                {% endif %}
                            },
                        {% endif %}
                {% endfor %}
                _ => Err(yellowstone_vixen_core::ParseError::from("Invalid Instruction discriminator".to_owned())),
            }
        {% else %}
            check_min_accounts_req(accounts_len, {{ instructions[0].accounts | length }})?;
            let mut ix_data = &ix.data[..];
            let de_ix_data:{{ instructions[0].name | pascalCase }}IxData = BorshDeserialize::deserialize(&mut ix_data)?;
            let ix_accounts = {{ instructions[0].name | pascalCase }}IxAccounts{
                {% for account in instructions[0].accounts %}
                    {{ account.name | snakeCase }}: ix.accounts[{{ account.index }}],   
                {% endfor %}
            };
            Ok({{ programName  | pascalCase }}ProgramIx::{{ instructions[0].name | pascalCase }}(ix_accounts, de_ix_data))
        {% endif %}
    }

}

pub fn check_min_accounts_req(actual: usize, expected: usize) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}



// #[cfg(feature = "proto")]
mod proto_parser {
    use super::super::proto_helpers::proto_types_parsers::IntoProto;
    use yellowstone_vixen_core::proto::ParseProto;
    use super::{InstructionParser,{{ programName | pascalCase }}ProgramIx};
    use crate::proto_def;

    {% for instruction in instructions %}
        use super::{{ instruction.name | pascalCase }}IxAccounts;
        impl IntoProto<proto_def::{{ instruction.name | pascalCase }}IxAccounts> for {{ instruction.name | pascalCase }}IxAccounts  {
            fn into_proto(self) -> proto_def::{{ instruction.name | pascalCase }}IxAccounts {
                proto_def::{{ instruction.name | pascalCase }}IxAccounts {
                    {% for account in instruction.accounts %}
                        {% if account.isOptional %}
                            {{ account.name }}: self.{{ account.name }}.map(|p| p.to_string()),
                        {% else %}
                            {{ account.name }}: self.{{ account.name }}.to_string(),
                        {% endif %}
                    {% endfor %}
                }
            }
        }   
        {% if instruction.hasArgs  %}
            use super::{{ instruction.name | pascalCase }}IxData;
            impl IntoProto<proto_def::{{ instruction.name | pascalCase }}IxData> for {{ instruction.name | pascalCase }}IxData  {
                fn into_proto(self) -> proto_def::{{ instruction.name | pascalCase }}IxData {
                    proto_def::{{ instruction.name | pascalCase }}IxData {
                        {% for field in instruction.ixArgs %}
                            {{ field.name }}: {{ field.transform }},
                        {% endfor %}
                    }
                }
            }
        {% endif %}
    {% endfor %}

    impl IntoProto<proto_def::{{ programName | pascalCase }}ProgramIx> for {{ programName | pascalCase }}ProgramIx {
        fn into_proto(self) -> proto_def::{{ programName | pascalCase }}ProgramIx {
           match self {
                {% for instruction in instructions %}
                    {% if instruction.hasArgs %}
                        {{ programName | pascalCase }}ProgramIx::{{ instruction.name | pascalCase }}(acc, data) => proto_def::{{ programName | pascalCase  }}ProgramIx {
                            ix_oneof: Some(proto_def::{{ programName | snakeCase }}_program_ix::IxOneof::{{ instruction.name | pascalCase }}(proto_def::{{ instruction.name | pascalCase }}Ix {
                                accounts: Some(acc.into_proto()),
                                data: Some(data.into_proto()),
                            })),
                        },
                    {% else %}
                        {{ programName | pascalCase }}ProgramIx::{{ instruction.name | pascalCase }}(acc) => proto_def::{{ programName | pascalCase  }}ProgramIx {
                            ix_oneof: Some(proto_def::{{ programName | snakeCase }}_program_ix::IxOneof::{{ instruction.name | pascalCase }}(proto_def::{{ instruction.name | pascalCase }}Ix {
                                accounts: Some(acc.into_proto()),
                            })),
                        },
                    {% endif %}
                {% endfor %}
            }
        }
    }
      
    impl ParseProto for InstructionParser {
        type Message = proto_def::{{ programName | pascalCase  }}ProgramIx;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}



{% endblock %}
