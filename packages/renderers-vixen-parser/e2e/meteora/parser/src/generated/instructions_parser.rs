//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use codama_renderers_rust_e2e_meteora::instructions::{
    AddLiquidity as AddLiquidityIxAccounts,
    AddLiquidityByStrategy as AddLiquidityByStrategyIxAccounts,
    AddLiquidityByStrategyInstructionArgs as AddLiquidityByStrategyIxData,
    AddLiquidityByStrategyOneSide as AddLiquidityByStrategyOneSideIxAccounts,
    AddLiquidityByStrategyOneSideInstructionArgs as AddLiquidityByStrategyOneSideIxData,
    AddLiquidityByWeight as AddLiquidityByWeightIxAccounts,
    AddLiquidityByWeightInstructionArgs as AddLiquidityByWeightIxData,
    AddLiquidityInstructionArgs as AddLiquidityIxData,
    AddLiquidityOneSide as AddLiquidityOneSideIxAccounts,
    AddLiquidityOneSideInstructionArgs as AddLiquidityOneSideIxData,
    AddLiquidityOneSidePrecise as AddLiquidityOneSidePreciseIxAccounts,
    AddLiquidityOneSidePreciseInstructionArgs as AddLiquidityOneSidePreciseIxData,
    ClaimFee as ClaimFeeIxAccounts, ClaimReward as ClaimRewardIxAccounts,
    ClaimRewardInstructionArgs as ClaimRewardIxData, ClosePosition as ClosePositionIxAccounts,
    ClosePresetParameter as ClosePresetParameterIxAccounts, FundReward as FundRewardIxAccounts,
    FundRewardInstructionArgs as FundRewardIxData, GoToABin as GoToABinIxAccounts,
    GoToABinInstructionArgs as GoToABinIxData,
    IncreaseOracleLength as IncreaseOracleLengthIxAccounts,
    IncreaseOracleLengthInstructionArgs as IncreaseOracleLengthIxData,
    InitializeBinArray as InitializeBinArrayIxAccounts,
    InitializeBinArrayBitmapExtension as InitializeBinArrayBitmapExtensionIxAccounts,
    InitializeBinArrayInstructionArgs as InitializeBinArrayIxData,
    InitializeCustomizablePermissionlessLbPair as InitializeCustomizablePermissionlessLbPairIxAccounts,
    InitializeCustomizablePermissionlessLbPairInstructionArgs as InitializeCustomizablePermissionlessLbPairIxData,
    InitializeLbPair as InitializeLbPairIxAccounts,
    InitializeLbPairInstructionArgs as InitializeLbPairIxData,
    InitializePermissionLbPair as InitializePermissionLbPairIxAccounts,
    InitializePermissionLbPairInstructionArgs as InitializePermissionLbPairIxData,
    InitializePosition as InitializePositionIxAccounts,
    InitializePositionByOperator as InitializePositionByOperatorIxAccounts,
    InitializePositionByOperatorInstructionArgs as InitializePositionByOperatorIxData,
    InitializePositionInstructionArgs as InitializePositionIxData,
    InitializePositionPda as InitializePositionPdaIxAccounts,
    InitializePositionPdaInstructionArgs as InitializePositionPdaIxData,
    InitializePresetParameter as InitializePresetParameterIxAccounts,
    InitializePresetParameterInstructionArgs as InitializePresetParameterIxData,
    InitializeReward as InitializeRewardIxAccounts,
    InitializeRewardInstructionArgs as InitializeRewardIxData,
    MigrateBinArray as MigrateBinArrayIxAccounts, MigratePosition as MigratePositionIxAccounts,
    RemoveAllLiquidity as RemoveAllLiquidityIxAccounts,
    RemoveLiquidity as RemoveLiquidityIxAccounts,
    RemoveLiquidityByRange as RemoveLiquidityByRangeIxAccounts,
    RemoveLiquidityByRangeInstructionArgs as RemoveLiquidityByRangeIxData,
    RemoveLiquidityInstructionArgs as RemoveLiquidityIxData,
    SetActivationPoint as SetActivationPointIxAccounts,
    SetActivationPointInstructionArgs as SetActivationPointIxData,
    SetPreActivationDuration as SetPreActivationDurationIxAccounts,
    SetPreActivationDurationInstructionArgs as SetPreActivationDurationIxData,
    SetPreActivationSwapAddress as SetPreActivationSwapAddressIxAccounts,
    SetPreActivationSwapAddressInstructionArgs as SetPreActivationSwapAddressIxData,
    Swap as SwapIxAccounts, SwapExactOut as SwapExactOutIxAccounts,
    SwapExactOutInstructionArgs as SwapExactOutIxData, SwapInstructionArgs as SwapIxData,
    SwapWithPriceImpact as SwapWithPriceImpactIxAccounts,
    SwapWithPriceImpactInstructionArgs as SwapWithPriceImpactIxData,
    TogglePairStatus as TogglePairStatusIxAccounts,
    UpdateFeeParameters as UpdateFeeParametersIxAccounts,
    UpdateFeeParametersInstructionArgs as UpdateFeeParametersIxData,
    UpdateFeesAndRewards as UpdateFeesAndRewardsIxAccounts,
    UpdatePositionOperator as UpdatePositionOperatorIxAccounts,
    UpdatePositionOperatorInstructionArgs as UpdatePositionOperatorIxData,
    UpdateRewardDuration as UpdateRewardDurationIxAccounts,
    UpdateRewardDurationInstructionArgs as UpdateRewardDurationIxData,
    UpdateRewardFunder as UpdateRewardFunderIxAccounts,
    UpdateRewardFunderInstructionArgs as UpdateRewardFunderIxData,
    WithdrawIneligibleReward as WithdrawIneligibleRewardIxAccounts,
    WithdrawIneligibleRewardInstructionArgs as WithdrawIneligibleRewardIxData,
    WithdrawProtocolFee as WithdrawProtocolFeeIxAccounts,
    WithdrawProtocolFeeInstructionArgs as WithdrawProtocolFeeIxData,
};
use codama_renderers_rust_e2e_meteora::ID;

/// LbClmm Instructions
#[derive(Debug)]
pub enum LbClmmProgramIx {
    InitializeLbPair(InitializeLbPairIxAccounts, InitializeLbPairIxData),
    InitializePermissionLbPair(
        InitializePermissionLbPairIxAccounts,
        InitializePermissionLbPairIxData,
    ),
    InitializeCustomizablePermissionlessLbPair(
        InitializeCustomizablePermissionlessLbPairIxAccounts,
        InitializeCustomizablePermissionlessLbPairIxData,
    ),
    InitializeBinArrayBitmapExtension(InitializeBinArrayBitmapExtensionIxAccounts),
    InitializeBinArray(InitializeBinArrayIxAccounts, InitializeBinArrayIxData),
    AddLiquidity(AddLiquidityIxAccounts, AddLiquidityIxData),
    AddLiquidityByWeight(AddLiquidityByWeightIxAccounts, AddLiquidityByWeightIxData),
    AddLiquidityByStrategy(
        AddLiquidityByStrategyIxAccounts,
        AddLiquidityByStrategyIxData,
    ),
    AddLiquidityByStrategyOneSide(
        AddLiquidityByStrategyOneSideIxAccounts,
        AddLiquidityByStrategyOneSideIxData,
    ),
    AddLiquidityOneSide(AddLiquidityOneSideIxAccounts, AddLiquidityOneSideIxData),
    RemoveLiquidity(RemoveLiquidityIxAccounts, RemoveLiquidityIxData),
    InitializePosition(InitializePositionIxAccounts, InitializePositionIxData),
    InitializePositionPda(InitializePositionPdaIxAccounts, InitializePositionPdaIxData),
    InitializePositionByOperator(
        InitializePositionByOperatorIxAccounts,
        InitializePositionByOperatorIxData,
    ),
    UpdatePositionOperator(
        UpdatePositionOperatorIxAccounts,
        UpdatePositionOperatorIxData,
    ),
    Swap(SwapIxAccounts, SwapIxData),
    SwapExactOut(SwapExactOutIxAccounts, SwapExactOutIxData),
    SwapWithPriceImpact(SwapWithPriceImpactIxAccounts, SwapWithPriceImpactIxData),
    WithdrawProtocolFee(WithdrawProtocolFeeIxAccounts, WithdrawProtocolFeeIxData),
    InitializeReward(InitializeRewardIxAccounts, InitializeRewardIxData),
    FundReward(FundRewardIxAccounts, FundRewardIxData),
    UpdateRewardFunder(UpdateRewardFunderIxAccounts, UpdateRewardFunderIxData),
    UpdateRewardDuration(UpdateRewardDurationIxAccounts, UpdateRewardDurationIxData),
    ClaimReward(ClaimRewardIxAccounts, ClaimRewardIxData),
    ClaimFee(ClaimFeeIxAccounts),
    ClosePosition(ClosePositionIxAccounts),
    UpdateFeeParameters(UpdateFeeParametersIxAccounts, UpdateFeeParametersIxData),
    IncreaseOracleLength(IncreaseOracleLengthIxAccounts, IncreaseOracleLengthIxData),
    InitializePresetParameter(
        InitializePresetParameterIxAccounts,
        InitializePresetParameterIxData,
    ),
    ClosePresetParameter(ClosePresetParameterIxAccounts),
    RemoveAllLiquidity(RemoveAllLiquidityIxAccounts),
    TogglePairStatus(TogglePairStatusIxAccounts),
    MigratePosition(MigratePositionIxAccounts),
    MigrateBinArray(MigrateBinArrayIxAccounts),
    UpdateFeesAndRewards(UpdateFeesAndRewardsIxAccounts),
    WithdrawIneligibleReward(
        WithdrawIneligibleRewardIxAccounts,
        WithdrawIneligibleRewardIxData,
    ),
    SetActivationPoint(SetActivationPointIxAccounts, SetActivationPointIxData),
    RemoveLiquidityByRange(
        RemoveLiquidityByRangeIxAccounts,
        RemoveLiquidityByRangeIxData,
    ),
    AddLiquidityOneSidePrecise(
        AddLiquidityOneSidePreciseIxAccounts,
        AddLiquidityOneSidePreciseIxData,
    ),
    GoToABin(GoToABinIxAccounts, GoToABinIxData),
    SetPreActivationDuration(
        SetPreActivationDurationIxAccounts,
        SetPreActivationDurationIxData,
    ),
    SetPreActivationSwapAddress(
        SetPreActivationSwapAddressIxAccounts,
        SetPreActivationSwapAddressIxData,
    ),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = LbClmmProgramIx;

    fn id(&self) -> std::borrow::Cow<str> {
        "LbClmm::InstructionParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<LbClmmProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        match ix_discriminator {
            [47, 157, 226, 180, 12, 240, 33, 71] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = InitializeBinArrayBitmapExtensionIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: ix.accounts[1].0.into(),
                    funder: ix.accounts[2].0.into(),
                    system_program: ix.accounts[3].0.into(),
                    rent: ix.accounts[4].0.into(),
                };
                Ok(LbClmmProgramIx::InitializeBinArrayBitmapExtension(
                    ix_accounts,
                ))
            }
            [35, 86, 19, 185, 78, 212, 75, 211] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = InitializeBinArrayIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array: ix.accounts[1].0.into(),
                    funder: ix.accounts[2].0.into(),
                    system_program: ix.accounts[3].0.into(),
                };
                let de_ix_data: InitializeBinArrayIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializeBinArray(ix_accounts, de_ix_data))
            }
            [219, 192, 234, 71, 190, 191, 102, 80] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = InitializePositionIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    position: ix.accounts[1].0.into(),
                    lb_pair: ix.accounts[2].0.into(),
                    owner: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                    rent: ix.accounts[5].0.into(),
                    event_authority: ix.accounts[6].0.into(),
                    program: ix.accounts[7].0.into(),
                };
                let de_ix_data: InitializePositionIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePosition(ix_accounts, de_ix_data))
            }
            [46, 82, 125, 146, 85, 141, 228, 153] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = InitializePositionPdaIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    base: ix.accounts[1].0.into(),
                    position: ix.accounts[2].0.into(),
                    lb_pair: ix.accounts[3].0.into(),
                    owner: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                    rent: ix.accounts[6].0.into(),
                    event_authority: ix.accounts[7].0.into(),
                    program: ix.accounts[8].0.into(),
                };
                let de_ix_data: InitializePositionPdaIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePositionPda(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [251, 189, 190, 244, 117, 254, 35, 148] => {
                check_min_accounts_req(accounts_len, 11)?;
                let ix_accounts = InitializePositionByOperatorIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    base: ix.accounts[1].0.into(),
                    position: ix.accounts[2].0.into(),
                    lb_pair: ix.accounts[3].0.into(),
                    owner: ix.accounts[4].0.into(),
                    operator: ix.accounts[5].0.into(),
                    operator_token_x: ix.accounts[6].0.into(),
                    owner_token_x: ix.accounts[7].0.into(),
                    system_program: ix.accounts[8].0.into(),
                    event_authority: ix.accounts[9].0.into(),
                    program: ix.accounts[10].0.into(),
                };
                let de_ix_data: InitializePositionByOperatorIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePositionByOperator(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [202, 184, 103, 143, 180, 191, 116, 217] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdatePositionOperatorIxAccounts {
                    position: ix.accounts[0].0.into(),
                    owner: ix.accounts[1].0.into(),
                    event_authority: ix.accounts[2].0.into(),
                    program: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdatePositionOperatorIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdatePositionOperator(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [158, 201, 158, 189, 33, 93, 162, 103] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = WithdrawProtocolFeeIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    reserve_x: ix.accounts[1].0.into(),
                    reserve_y: ix.accounts[2].0.into(),
                    token_x_mint: ix.accounts[3].0.into(),
                    token_y_mint: ix.accounts[4].0.into(),
                    receiver_token_x: ix.accounts[5].0.into(),
                    receiver_token_y: ix.accounts[6].0.into(),
                    token_x_program: ix.accounts[7].0.into(),
                    token_y_program: ix.accounts[8].0.into(),
                };
                let de_ix_data: WithdrawProtocolFeeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::WithdrawProtocolFee(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [95, 135, 192, 196, 242, 129, 230, 68] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = InitializeRewardIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    reward_vault: ix.accounts[1].0.into(),
                    reward_mint: ix.accounts[2].0.into(),
                    admin: ix.accounts[3].0.into(),
                    token_program: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                    rent: ix.accounts[6].0.into(),
                    event_authority: ix.accounts[7].0.into(),
                    program: ix.accounts[8].0.into(),
                };
                let de_ix_data: InitializeRewardIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializeReward(ix_accounts, de_ix_data))
            }
            [188, 50, 249, 165, 93, 151, 38, 63] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = FundRewardIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    reward_vault: ix.accounts[1].0.into(),
                    reward_mint: ix.accounts[2].0.into(),
                    funder_token_account: ix.accounts[3].0.into(),
                    funder: ix.accounts[4].0.into(),
                    bin_array: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                    event_authority: ix.accounts[7].0.into(),
                    program: ix.accounts[8].0.into(),
                };
                let de_ix_data: FundRewardIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::FundReward(ix_accounts, de_ix_data))
            }
            [211, 28, 48, 32, 215, 160, 35, 23] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateRewardFunderIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    event_authority: ix.accounts[2].0.into(),
                    program: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdateRewardFunderIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdateRewardFunder(ix_accounts, de_ix_data))
            }
            [138, 174, 196, 169, 213, 235, 254, 107] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = UpdateRewardDurationIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    bin_array: ix.accounts[2].0.into(),
                    event_authority: ix.accounts[3].0.into(),
                    program: ix.accounts[4].0.into(),
                };
                let de_ix_data: UpdateRewardDurationIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdateRewardDuration(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [149, 95, 181, 242, 94, 90, 158, 162] => {
                check_min_accounts_req(accounts_len, 11)?;
                let ix_accounts = ClaimRewardIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    position: ix.accounts[1].0.into(),
                    bin_array_lower: ix.accounts[2].0.into(),
                    bin_array_upper: ix.accounts[3].0.into(),
                    sender: ix.accounts[4].0.into(),
                    reward_vault: ix.accounts[5].0.into(),
                    reward_mint: ix.accounts[6].0.into(),
                    user_token_account: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                    event_authority: ix.accounts[9].0.into(),
                    program: ix.accounts[10].0.into(),
                };
                let de_ix_data: ClaimRewardIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::ClaimReward(ix_accounts, de_ix_data))
            }
            [169, 32, 79, 137, 136, 232, 70, 137] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = ClaimFeeIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    position: ix.accounts[1].0.into(),
                    bin_array_lower: ix.accounts[2].0.into(),
                    bin_array_upper: ix.accounts[3].0.into(),
                    sender: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    user_token_x: ix.accounts[7].0.into(),
                    user_token_y: ix.accounts[8].0.into(),
                    token_x_mint: ix.accounts[9].0.into(),
                    token_y_mint: ix.accounts[10].0.into(),
                    token_program: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                Ok(LbClmmProgramIx::ClaimFee(ix_accounts))
            }
            [123, 134, 81, 0, 49, 68, 98, 98] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = ClosePositionIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_lower: ix.accounts[2].0.into(),
                    bin_array_upper: ix.accounts[3].0.into(),
                    sender: ix.accounts[4].0.into(),
                    rent_receiver: ix.accounts[5].0.into(),
                    event_authority: ix.accounts[6].0.into(),
                    program: ix.accounts[7].0.into(),
                };
                Ok(LbClmmProgramIx::ClosePosition(ix_accounts))
            }
            [128, 128, 208, 91, 246, 53, 31, 176] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateFeeParametersIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    event_authority: ix.accounts[2].0.into(),
                    program: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdateFeeParametersIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdateFeeParameters(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [190, 61, 125, 87, 103, 79, 158, 173] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = IncreaseOracleLengthIxAccounts {
                    oracle: ix.accounts[0].0.into(),
                    funder: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                    event_authority: ix.accounts[3].0.into(),
                    program: ix.accounts[4].0.into(),
                };
                let de_ix_data: IncreaseOracleLengthIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::IncreaseOracleLength(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [66, 188, 71, 211, 98, 109, 14, 186] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = InitializePresetParameterIxAccounts {
                    preset_parameter: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                    rent: ix.accounts[3].0.into(),
                };
                let de_ix_data: InitializePresetParameterIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePresetParameter(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [4, 148, 145, 100, 134, 26, 181, 61] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = ClosePresetParameterIxAccounts {
                    preset_parameter: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    rent_receiver: ix.accounts[2].0.into(),
                };
                Ok(LbClmmProgramIx::ClosePresetParameter(ix_accounts))
            }
            [61, 115, 52, 23, 46, 13, 31, 144] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = TogglePairStatusIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                };
                Ok(LbClmmProgramIx::TogglePairStatus(ix_accounts))
            }
            [15, 132, 59, 50, 199, 6, 251, 46] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = MigratePositionIxAccounts {
                    position_v2: ix.accounts[0].0.into(),
                    position_v1: ix.accounts[1].0.into(),
                    lb_pair: ix.accounts[2].0.into(),
                    bin_array_lower: ix.accounts[3].0.into(),
                    bin_array_upper: ix.accounts[4].0.into(),
                    owner: ix.accounts[5].0.into(),
                    system_program: ix.accounts[6].0.into(),
                    rent_receiver: ix.accounts[7].0.into(),
                    event_authority: ix.accounts[8].0.into(),
                    program: ix.accounts[9].0.into(),
                };
                Ok(LbClmmProgramIx::MigratePosition(ix_accounts))
            }
            [17, 23, 159, 211, 101, 184, 41, 241] => {
                check_min_accounts_req(accounts_len, 1)?;
                let ix_accounts = MigrateBinArrayIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                };
                Ok(LbClmmProgramIx::MigrateBinArray(ix_accounts))
            }
            [154, 230, 250, 13, 236, 209, 75, 223] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = UpdateFeesAndRewardsIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_lower: ix.accounts[2].0.into(),
                    bin_array_upper: ix.accounts[3].0.into(),
                    owner: ix.accounts[4].0.into(),
                };
                Ok(LbClmmProgramIx::UpdateFeesAndRewards(ix_accounts))
            }
            [148, 206, 42, 195, 247, 49, 103, 8] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = WithdrawIneligibleRewardIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    reward_vault: ix.accounts[1].0.into(),
                    reward_mint: ix.accounts[2].0.into(),
                    funder_token_account: ix.accounts[3].0.into(),
                    funder: ix.accounts[4].0.into(),
                    bin_array: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                    event_authority: ix.accounts[7].0.into(),
                    program: ix.accounts[8].0.into(),
                };
                let de_ix_data: WithdrawIneligibleRewardIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::WithdrawIneligibleReward(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [91, 249, 15, 165, 26, 129, 254, 125] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetActivationPointIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetActivationPointIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SetActivationPoint(ix_accounts, de_ix_data))
            }
            [165, 61, 201, 244, 130, 159, 22, 100] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetPreActivationDurationIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    creator: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetPreActivationDurationIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SetPreActivationDuration(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [57, 139, 47, 123, 216, 80, 223, 10] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetPreActivationSwapAddressIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    creator: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetPreActivationSwapAddressIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SetPreActivationSwapAddress(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use super::{InstructionParser, LbClmmProgramIx};
    use crate::proto_def;
    use yellowstone_vixen_core::proto::ParseProto;

    use super::InitializeLbPairIxAccounts;
    impl IntoProto<proto_def::InitializeLbPairIxAccounts> for InitializeLbPairIxAccounts {
        fn into_proto(self) -> proto_def::InitializeLbPairIxAccounts {
            proto_def::InitializeLbPairIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                token_mint_x: self.token_mint_x.to_string(),
                token_mint_y: self.token_mint_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                oracle: self.oracle.to_string(),
                preset_parameter: self.preset_parameter.to_string(),
                funder: self.funder.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializeLbPairIxData;
    impl IntoProto<proto_def::InitializeLbPairIxData> for InitializeLbPairIxData {
        fn into_proto(self) -> proto_def::InitializeLbPairIxData {
            proto_def::InitializeLbPairIxData {
                active_id: self.active_id.into(),
                bin_step: self.bin_step.into(),
            }
        }
    }
    use super::InitializePermissionLbPairIxAccounts;
    impl IntoProto<proto_def::InitializePermissionLbPairIxAccounts>
        for InitializePermissionLbPairIxAccounts
    {
        fn into_proto(self) -> proto_def::InitializePermissionLbPairIxAccounts {
            proto_def::InitializePermissionLbPairIxAccounts {
                base: self.base.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                token_mint_x: self.token_mint_x.to_string(),
                token_mint_y: self.token_mint_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                oracle: self.oracle.to_string(),
                admin: self.admin.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializePermissionLbPairIxData;
    impl IntoProto<proto_def::InitializePermissionLbPairIxData> for InitializePermissionLbPairIxData {
        fn into_proto(self) -> proto_def::InitializePermissionLbPairIxData {
            proto_def::InitializePermissionLbPairIxData {
                active_id: self.active_id.into(),
                bin_step: self.bin_step.into(),
                base_factor: self.base_factor.into(),
                min_bin_id: self.min_bin_id.into(),
                max_bin_id: self.max_bin_id.into(),
                activation_type: self.activation_type.into(),
            }
        }
    }
    use super::InitializeCustomizablePermissionlessLbPairIxAccounts;
    impl IntoProto<proto_def::InitializeCustomizablePermissionlessLbPairIxAccounts>
        for InitializeCustomizablePermissionlessLbPairIxAccounts
    {
        fn into_proto(self) -> proto_def::InitializeCustomizablePermissionlessLbPairIxAccounts {
            proto_def::InitializeCustomizablePermissionlessLbPairIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                token_mint_x: self.token_mint_x.to_string(),
                token_mint_y: self.token_mint_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                oracle: self.oracle.to_string(),
                user_token_x: self.user_token_x.to_string(),
                funder: self.funder.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializeCustomizablePermissionlessLbPairIxData;
    impl IntoProto<proto_def::InitializeCustomizablePermissionlessLbPairIxData>
        for InitializeCustomizablePermissionlessLbPairIxData
    {
        fn into_proto(self) -> proto_def::InitializeCustomizablePermissionlessLbPairIxData {
            proto_def::InitializeCustomizablePermissionlessLbPairIxData {
                active_id: self.active_id.into(),
                bin_step: self.bin_step.into(),
                base_factor: self.base_factor.into(),
                activation_type: self.activation_type.into(),
                has_alpha_vault: self.has_alpha_vault.into(),
                activation_point: self.activation_point.into(),
                padding: self.padding.into(),
            }
        }
    }
    use super::InitializeBinArrayBitmapExtensionIxAccounts;
    impl IntoProto<proto_def::InitializeBinArrayBitmapExtensionIxAccounts>
        for InitializeBinArrayBitmapExtensionIxAccounts
    {
        fn into_proto(self) -> proto_def::InitializeBinArrayBitmapExtensionIxAccounts {
            proto_def::InitializeBinArrayBitmapExtensionIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                funder: self.funder.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
            }
        }
    }
    use super::InitializeBinArrayIxAccounts;
    impl IntoProto<proto_def::InitializeBinArrayIxAccounts> for InitializeBinArrayIxAccounts {
        fn into_proto(self) -> proto_def::InitializeBinArrayIxAccounts {
            proto_def::InitializeBinArrayIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array: self.bin_array.to_string(),
                funder: self.funder.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::InitializeBinArrayIxData;
    impl IntoProto<proto_def::InitializeBinArrayIxData> for InitializeBinArrayIxData {
        fn into_proto(self) -> proto_def::InitializeBinArrayIxData {
            proto_def::InitializeBinArrayIxData {
                index: self.index.into(),
            }
        }
    }
    use super::AddLiquidityIxAccounts;
    impl IntoProto<proto_def::AddLiquidityIxAccounts> for AddLiquidityIxAccounts {
        fn into_proto(self) -> proto_def::AddLiquidityIxAccounts {
            proto_def::AddLiquidityIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityIxData;
    impl IntoProto<proto_def::AddLiquidityIxData> for AddLiquidityIxData {
        fn into_proto(self) -> proto_def::AddLiquidityIxData {
            proto_def::AddLiquidityIxData {
                amount_x: self.amount_x.into(),
                amount_y: self.amount_y.into(),
                bin_liquidity_dist: self.bin_liquidity_dist.into(),
            }
        }
    }
    use super::AddLiquidityByWeightIxAccounts;
    impl IntoProto<proto_def::AddLiquidityByWeightIxAccounts> for AddLiquidityByWeightIxAccounts {
        fn into_proto(self) -> proto_def::AddLiquidityByWeightIxAccounts {
            proto_def::AddLiquidityByWeightIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityByWeightIxData;
    impl IntoProto<proto_def::AddLiquidityByWeightIxData> for AddLiquidityByWeightIxData {
        fn into_proto(self) -> proto_def::AddLiquidityByWeightIxData {
            proto_def::AddLiquidityByWeightIxData {
                amount_x: self.amount_x.into(),
                amount_y: self.amount_y.into(),
                active_id: self.active_id.into(),
                max_active_bin_slippage: self.max_active_bin_slippage.into(),
                bin_liquidity_dist: self.bin_liquidity_dist.into(),
            }
        }
    }
    use super::AddLiquidityByStrategyIxAccounts;
    impl IntoProto<proto_def::AddLiquidityByStrategyIxAccounts> for AddLiquidityByStrategyIxAccounts {
        fn into_proto(self) -> proto_def::AddLiquidityByStrategyIxAccounts {
            proto_def::AddLiquidityByStrategyIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityByStrategyIxData;
    impl IntoProto<proto_def::AddLiquidityByStrategyIxData> for AddLiquidityByStrategyIxData {
        fn into_proto(self) -> proto_def::AddLiquidityByStrategyIxData {
            proto_def::AddLiquidityByStrategyIxData {
                amount_x: self.amount_x.into(),
                amount_y: self.amount_y.into(),
                active_id: self.active_id.into(),
                max_active_bin_slippage: self.max_active_bin_slippage.into(),
                strategy_parameters: self.strategy_parameters.into(),
            }
        }
    }
    use super::AddLiquidityByStrategyOneSideIxAccounts;
    impl IntoProto<proto_def::AddLiquidityByStrategyOneSideIxAccounts>
        for AddLiquidityByStrategyOneSideIxAccounts
    {
        fn into_proto(self) -> proto_def::AddLiquidityByStrategyOneSideIxAccounts {
            proto_def::AddLiquidityByStrategyOneSideIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                user_token: self.user_token.to_string(),
                reserve: self.reserve.to_string(),
                token_mint: self.token_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityByStrategyOneSideIxData;
    impl IntoProto<proto_def::AddLiquidityByStrategyOneSideIxData>
        for AddLiquidityByStrategyOneSideIxData
    {
        fn into_proto(self) -> proto_def::AddLiquidityByStrategyOneSideIxData {
            proto_def::AddLiquidityByStrategyOneSideIxData {
                amount: self.amount.into(),
                active_id: self.active_id.into(),
                max_active_bin_slippage: self.max_active_bin_slippage.into(),
                strategy_parameters: self.strategy_parameters.into(),
            }
        }
    }
    use super::AddLiquidityOneSideIxAccounts;
    impl IntoProto<proto_def::AddLiquidityOneSideIxAccounts> for AddLiquidityOneSideIxAccounts {
        fn into_proto(self) -> proto_def::AddLiquidityOneSideIxAccounts {
            proto_def::AddLiquidityOneSideIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                user_token: self.user_token.to_string(),
                reserve: self.reserve.to_string(),
                token_mint: self.token_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityOneSideIxData;
    impl IntoProto<proto_def::AddLiquidityOneSideIxData> for AddLiquidityOneSideIxData {
        fn into_proto(self) -> proto_def::AddLiquidityOneSideIxData {
            proto_def::AddLiquidityOneSideIxData {
                amount: self.amount.into(),
                active_id: self.active_id.into(),
                max_active_bin_slippage: self.max_active_bin_slippage.into(),
                bin_liquidity_dist: self.bin_liquidity_dist.into(),
            }
        }
    }
    use super::RemoveLiquidityIxAccounts;
    impl IntoProto<proto_def::RemoveLiquidityIxAccounts> for RemoveLiquidityIxAccounts {
        fn into_proto(self) -> proto_def::RemoveLiquidityIxAccounts {
            proto_def::RemoveLiquidityIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::RemoveLiquidityIxData;
    impl IntoProto<proto_def::RemoveLiquidityIxData> for RemoveLiquidityIxData {
        fn into_proto(self) -> proto_def::RemoveLiquidityIxData {
            proto_def::RemoveLiquidityIxData {
                bin_liquidity_removal: self.bin_liquidity_removal.into(),
            }
        }
    }
    use super::InitializePositionIxAccounts;
    impl IntoProto<proto_def::InitializePositionIxAccounts> for InitializePositionIxAccounts {
        fn into_proto(self) -> proto_def::InitializePositionIxAccounts {
            proto_def::InitializePositionIxAccounts {
                payer: self.payer.to_string(),
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                owner: self.owner.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializePositionIxData;
    impl IntoProto<proto_def::InitializePositionIxData> for InitializePositionIxData {
        fn into_proto(self) -> proto_def::InitializePositionIxData {
            proto_def::InitializePositionIxData {
                lower_bin_id: self.lower_bin_id.into(),
                width: self.width.into(),
            }
        }
    }
    use super::InitializePositionPdaIxAccounts;
    impl IntoProto<proto_def::InitializePositionPdaIxAccounts> for InitializePositionPdaIxAccounts {
        fn into_proto(self) -> proto_def::InitializePositionPdaIxAccounts {
            proto_def::InitializePositionPdaIxAccounts {
                payer: self.payer.to_string(),
                base: self.base.to_string(),
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                owner: self.owner.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializePositionPdaIxData;
    impl IntoProto<proto_def::InitializePositionPdaIxData> for InitializePositionPdaIxData {
        fn into_proto(self) -> proto_def::InitializePositionPdaIxData {
            proto_def::InitializePositionPdaIxData {
                lower_bin_id: self.lower_bin_id.into(),
                width: self.width.into(),
            }
        }
    }
    use super::InitializePositionByOperatorIxAccounts;
    impl IntoProto<proto_def::InitializePositionByOperatorIxAccounts>
        for InitializePositionByOperatorIxAccounts
    {
        fn into_proto(self) -> proto_def::InitializePositionByOperatorIxAccounts {
            proto_def::InitializePositionByOperatorIxAccounts {
                payer: self.payer.to_string(),
                base: self.base.to_string(),
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                owner: self.owner.to_string(),
                operator: self.operator.to_string(),
                operator_token_x: self.operator_token_x.to_string(),
                owner_token_x: self.owner_token_x.to_string(),
                system_program: self.system_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializePositionByOperatorIxData;
    impl IntoProto<proto_def::InitializePositionByOperatorIxData>
        for InitializePositionByOperatorIxData
    {
        fn into_proto(self) -> proto_def::InitializePositionByOperatorIxData {
            proto_def::InitializePositionByOperatorIxData {
                lower_bin_id: self.lower_bin_id.into(),
                width: self.width.into(),
                fee_owner: self.fee_owner.into(),
                lock_release_point: self.lock_release_point.into(),
            }
        }
    }
    use super::UpdatePositionOperatorIxAccounts;
    impl IntoProto<proto_def::UpdatePositionOperatorIxAccounts> for UpdatePositionOperatorIxAccounts {
        fn into_proto(self) -> proto_def::UpdatePositionOperatorIxAccounts {
            proto_def::UpdatePositionOperatorIxAccounts {
                position: self.position.to_string(),
                owner: self.owner.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdatePositionOperatorIxData;
    impl IntoProto<proto_def::UpdatePositionOperatorIxData> for UpdatePositionOperatorIxData {
        fn into_proto(self) -> proto_def::UpdatePositionOperatorIxData {
            proto_def::UpdatePositionOperatorIxData {
                operator: self.operator.into(),
            }
        }
    }
    use super::SwapIxAccounts;
    impl IntoProto<proto_def::SwapIxAccounts> for SwapIxAccounts {
        fn into_proto(self) -> proto_def::SwapIxAccounts {
            proto_def::SwapIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                user_token_in: self.user_token_in.to_string(),
                user_token_out: self.user_token_out.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                oracle: self.oracle.to_string(),
                host_fee_in: self.host_fee_in.to_string(),
                user: self.user.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SwapIxData;
    impl IntoProto<proto_def::SwapIxData> for SwapIxData {
        fn into_proto(self) -> proto_def::SwapIxData {
            proto_def::SwapIxData {
                amount_in: self.amount_in.into(),
                min_amount_out: self.min_amount_out.into(),
            }
        }
    }
    use super::SwapExactOutIxAccounts;
    impl IntoProto<proto_def::SwapExactOutIxAccounts> for SwapExactOutIxAccounts {
        fn into_proto(self) -> proto_def::SwapExactOutIxAccounts {
            proto_def::SwapExactOutIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                user_token_in: self.user_token_in.to_string(),
                user_token_out: self.user_token_out.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                oracle: self.oracle.to_string(),
                host_fee_in: self.host_fee_in.to_string(),
                user: self.user.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SwapExactOutIxData;
    impl IntoProto<proto_def::SwapExactOutIxData> for SwapExactOutIxData {
        fn into_proto(self) -> proto_def::SwapExactOutIxData {
            proto_def::SwapExactOutIxData {
                max_in_amount: self.max_in_amount.into(),
                out_amount: self.out_amount.into(),
            }
        }
    }
    use super::SwapWithPriceImpactIxAccounts;
    impl IntoProto<proto_def::SwapWithPriceImpactIxAccounts> for SwapWithPriceImpactIxAccounts {
        fn into_proto(self) -> proto_def::SwapWithPriceImpactIxAccounts {
            proto_def::SwapWithPriceImpactIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                user_token_in: self.user_token_in.to_string(),
                user_token_out: self.user_token_out.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                oracle: self.oracle.to_string(),
                host_fee_in: self.host_fee_in.to_string(),
                user: self.user.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SwapWithPriceImpactIxData;
    impl IntoProto<proto_def::SwapWithPriceImpactIxData> for SwapWithPriceImpactIxData {
        fn into_proto(self) -> proto_def::SwapWithPriceImpactIxData {
            proto_def::SwapWithPriceImpactIxData {
                amount_in: self.amount_in.into(),
                active_id: self.active_id.into(),
                max_price_impact_bps: self.max_price_impact_bps.into(),
            }
        }
    }
    use super::WithdrawProtocolFeeIxAccounts;
    impl IntoProto<proto_def::WithdrawProtocolFeeIxAccounts> for WithdrawProtocolFeeIxAccounts {
        fn into_proto(self) -> proto_def::WithdrawProtocolFeeIxAccounts {
            proto_def::WithdrawProtocolFeeIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                receiver_token_x: self.receiver_token_x.to_string(),
                receiver_token_y: self.receiver_token_y.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
            }
        }
    }
    use super::WithdrawProtocolFeeIxData;
    impl IntoProto<proto_def::WithdrawProtocolFeeIxData> for WithdrawProtocolFeeIxData {
        fn into_proto(self) -> proto_def::WithdrawProtocolFeeIxData {
            proto_def::WithdrawProtocolFeeIxData {
                amount_x: self.amount_x.into(),
                amount_y: self.amount_y.into(),
            }
        }
    }
    use super::InitializeRewardIxAccounts;
    impl IntoProto<proto_def::InitializeRewardIxAccounts> for InitializeRewardIxAccounts {
        fn into_proto(self) -> proto_def::InitializeRewardIxAccounts {
            proto_def::InitializeRewardIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                reward_vault: self.reward_vault.to_string(),
                reward_mint: self.reward_mint.to_string(),
                admin: self.admin.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializeRewardIxData;
    impl IntoProto<proto_def::InitializeRewardIxData> for InitializeRewardIxData {
        fn into_proto(self) -> proto_def::InitializeRewardIxData {
            proto_def::InitializeRewardIxData {
                reward_index: self.reward_index.into(),
                reward_duration: self.reward_duration.into(),
                funder: self.funder.into(),
            }
        }
    }
    use super::FundRewardIxAccounts;
    impl IntoProto<proto_def::FundRewardIxAccounts> for FundRewardIxAccounts {
        fn into_proto(self) -> proto_def::FundRewardIxAccounts {
            proto_def::FundRewardIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                reward_vault: self.reward_vault.to_string(),
                reward_mint: self.reward_mint.to_string(),
                funder_token_account: self.funder_token_account.to_string(),
                funder: self.funder.to_string(),
                bin_array: self.bin_array.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::FundRewardIxData;
    impl IntoProto<proto_def::FundRewardIxData> for FundRewardIxData {
        fn into_proto(self) -> proto_def::FundRewardIxData {
            proto_def::FundRewardIxData {
                reward_index: self.reward_index.into(),
                amount: self.amount.into(),
                carry_forward: self.carry_forward.into(),
            }
        }
    }
    use super::UpdateRewardFunderIxAccounts;
    impl IntoProto<proto_def::UpdateRewardFunderIxAccounts> for UpdateRewardFunderIxAccounts {
        fn into_proto(self) -> proto_def::UpdateRewardFunderIxAccounts {
            proto_def::UpdateRewardFunderIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                admin: self.admin.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateRewardFunderIxData;
    impl IntoProto<proto_def::UpdateRewardFunderIxData> for UpdateRewardFunderIxData {
        fn into_proto(self) -> proto_def::UpdateRewardFunderIxData {
            proto_def::UpdateRewardFunderIxData {
                reward_index: self.reward_index.into(),
                new_funder: self.new_funder.into(),
            }
        }
    }
    use super::UpdateRewardDurationIxAccounts;
    impl IntoProto<proto_def::UpdateRewardDurationIxAccounts> for UpdateRewardDurationIxAccounts {
        fn into_proto(self) -> proto_def::UpdateRewardDurationIxAccounts {
            proto_def::UpdateRewardDurationIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                admin: self.admin.to_string(),
                bin_array: self.bin_array.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateRewardDurationIxData;
    impl IntoProto<proto_def::UpdateRewardDurationIxData> for UpdateRewardDurationIxData {
        fn into_proto(self) -> proto_def::UpdateRewardDurationIxData {
            proto_def::UpdateRewardDurationIxData {
                reward_index: self.reward_index.into(),
                new_duration: self.new_duration.into(),
            }
        }
    }
    use super::ClaimRewardIxAccounts;
    impl IntoProto<proto_def::ClaimRewardIxAccounts> for ClaimRewardIxAccounts {
        fn into_proto(self) -> proto_def::ClaimRewardIxAccounts {
            proto_def::ClaimRewardIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                position: self.position.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                reward_vault: self.reward_vault.to_string(),
                reward_mint: self.reward_mint.to_string(),
                user_token_account: self.user_token_account.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::ClaimRewardIxData;
    impl IntoProto<proto_def::ClaimRewardIxData> for ClaimRewardIxData {
        fn into_proto(self) -> proto_def::ClaimRewardIxData {
            proto_def::ClaimRewardIxData {
                reward_index: self.reward_index.into(),
            }
        }
    }
    use super::ClaimFeeIxAccounts;
    impl IntoProto<proto_def::ClaimFeeIxAccounts> for ClaimFeeIxAccounts {
        fn into_proto(self) -> proto_def::ClaimFeeIxAccounts {
            proto_def::ClaimFeeIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                position: self.position.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::ClosePositionIxAccounts;
    impl IntoProto<proto_def::ClosePositionIxAccounts> for ClosePositionIxAccounts {
        fn into_proto(self) -> proto_def::ClosePositionIxAccounts {
            proto_def::ClosePositionIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                rent_receiver: self.rent_receiver.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateFeeParametersIxAccounts;
    impl IntoProto<proto_def::UpdateFeeParametersIxAccounts> for UpdateFeeParametersIxAccounts {
        fn into_proto(self) -> proto_def::UpdateFeeParametersIxAccounts {
            proto_def::UpdateFeeParametersIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                admin: self.admin.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateFeeParametersIxData;
    impl IntoProto<proto_def::UpdateFeeParametersIxData> for UpdateFeeParametersIxData {
        fn into_proto(self) -> proto_def::UpdateFeeParametersIxData {
            proto_def::UpdateFeeParametersIxData {
                protocol_share: self.protocol_share.into(),
                base_factor: self.base_factor.into(),
            }
        }
    }
    use super::IncreaseOracleLengthIxAccounts;
    impl IntoProto<proto_def::IncreaseOracleLengthIxAccounts> for IncreaseOracleLengthIxAccounts {
        fn into_proto(self) -> proto_def::IncreaseOracleLengthIxAccounts {
            proto_def::IncreaseOracleLengthIxAccounts {
                oracle: self.oracle.to_string(),
                funder: self.funder.to_string(),
                system_program: self.system_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::IncreaseOracleLengthIxData;
    impl IntoProto<proto_def::IncreaseOracleLengthIxData> for IncreaseOracleLengthIxData {
        fn into_proto(self) -> proto_def::IncreaseOracleLengthIxData {
            proto_def::IncreaseOracleLengthIxData {
                length_to_add: self.length_to_add.into(),
            }
        }
    }
    use super::InitializePresetParameterIxAccounts;
    impl IntoProto<proto_def::InitializePresetParameterIxAccounts>
        for InitializePresetParameterIxAccounts
    {
        fn into_proto(self) -> proto_def::InitializePresetParameterIxAccounts {
            proto_def::InitializePresetParameterIxAccounts {
                preset_parameter: self.preset_parameter.to_string(),
                admin: self.admin.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
            }
        }
    }
    use super::InitializePresetParameterIxData;
    impl IntoProto<proto_def::InitializePresetParameterIxData> for InitializePresetParameterIxData {
        fn into_proto(self) -> proto_def::InitializePresetParameterIxData {
            proto_def::InitializePresetParameterIxData {
                bin_step: self.bin_step.into(),
                base_factor: self.base_factor.into(),
                filter_period: self.filter_period.into(),
                decay_period: self.decay_period.into(),
                reduction_factor: self.reduction_factor.into(),
                variable_fee_control: self.variable_fee_control.into(),
                max_volatility_accumulator: self.max_volatility_accumulator.into(),
                min_bin_id: self.min_bin_id.into(),
                max_bin_id: self.max_bin_id.into(),
                protocol_share: self.protocol_share.into(),
            }
        }
    }
    use super::ClosePresetParameterIxAccounts;
    impl IntoProto<proto_def::ClosePresetParameterIxAccounts> for ClosePresetParameterIxAccounts {
        fn into_proto(self) -> proto_def::ClosePresetParameterIxAccounts {
            proto_def::ClosePresetParameterIxAccounts {
                preset_parameter: self.preset_parameter.to_string(),
                admin: self.admin.to_string(),
                rent_receiver: self.rent_receiver.to_string(),
            }
        }
    }
    use super::RemoveAllLiquidityIxAccounts;
    impl IntoProto<proto_def::RemoveAllLiquidityIxAccounts> for RemoveAllLiquidityIxAccounts {
        fn into_proto(self) -> proto_def::RemoveAllLiquidityIxAccounts {
            proto_def::RemoveAllLiquidityIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::TogglePairStatusIxAccounts;
    impl IntoProto<proto_def::TogglePairStatusIxAccounts> for TogglePairStatusIxAccounts {
        fn into_proto(self) -> proto_def::TogglePairStatusIxAccounts {
            proto_def::TogglePairStatusIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                admin: self.admin.to_string(),
            }
        }
    }
    use super::MigratePositionIxAccounts;
    impl IntoProto<proto_def::MigratePositionIxAccounts> for MigratePositionIxAccounts {
        fn into_proto(self) -> proto_def::MigratePositionIxAccounts {
            proto_def::MigratePositionIxAccounts {
                position_v2: self.position_v2.to_string(),
                position_v1: self.position_v1.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                owner: self.owner.to_string(),
                system_program: self.system_program.to_string(),
                rent_receiver: self.rent_receiver.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::MigrateBinArrayIxAccounts;
    impl IntoProto<proto_def::MigrateBinArrayIxAccounts> for MigrateBinArrayIxAccounts {
        fn into_proto(self) -> proto_def::MigrateBinArrayIxAccounts {
            proto_def::MigrateBinArrayIxAccounts {
                lb_pair: self.lb_pair.to_string(),
            }
        }
    }
    use super::UpdateFeesAndRewardsIxAccounts;
    impl IntoProto<proto_def::UpdateFeesAndRewardsIxAccounts> for UpdateFeesAndRewardsIxAccounts {
        fn into_proto(self) -> proto_def::UpdateFeesAndRewardsIxAccounts {
            proto_def::UpdateFeesAndRewardsIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                owner: self.owner.to_string(),
            }
        }
    }
    use super::WithdrawIneligibleRewardIxAccounts;
    impl IntoProto<proto_def::WithdrawIneligibleRewardIxAccounts>
        for WithdrawIneligibleRewardIxAccounts
    {
        fn into_proto(self) -> proto_def::WithdrawIneligibleRewardIxAccounts {
            proto_def::WithdrawIneligibleRewardIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                reward_vault: self.reward_vault.to_string(),
                reward_mint: self.reward_mint.to_string(),
                funder_token_account: self.funder_token_account.to_string(),
                funder: self.funder.to_string(),
                bin_array: self.bin_array.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::WithdrawIneligibleRewardIxData;
    impl IntoProto<proto_def::WithdrawIneligibleRewardIxData> for WithdrawIneligibleRewardIxData {
        fn into_proto(self) -> proto_def::WithdrawIneligibleRewardIxData {
            proto_def::WithdrawIneligibleRewardIxData {
                reward_index: self.reward_index.into(),
            }
        }
    }
    use super::SetActivationPointIxAccounts;
    impl IntoProto<proto_def::SetActivationPointIxAccounts> for SetActivationPointIxAccounts {
        fn into_proto(self) -> proto_def::SetActivationPointIxAccounts {
            proto_def::SetActivationPointIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                admin: self.admin.to_string(),
            }
        }
    }
    use super::SetActivationPointIxData;
    impl IntoProto<proto_def::SetActivationPointIxData> for SetActivationPointIxData {
        fn into_proto(self) -> proto_def::SetActivationPointIxData {
            proto_def::SetActivationPointIxData {
                activation_point: self.activation_point.into(),
            }
        }
    }
    use super::RemoveLiquidityByRangeIxAccounts;
    impl IntoProto<proto_def::RemoveLiquidityByRangeIxAccounts> for RemoveLiquidityByRangeIxAccounts {
        fn into_proto(self) -> proto_def::RemoveLiquidityByRangeIxAccounts {
            proto_def::RemoveLiquidityByRangeIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::RemoveLiquidityByRangeIxData;
    impl IntoProto<proto_def::RemoveLiquidityByRangeIxData> for RemoveLiquidityByRangeIxData {
        fn into_proto(self) -> proto_def::RemoveLiquidityByRangeIxData {
            proto_def::RemoveLiquidityByRangeIxData {
                from_bin_id: self.from_bin_id.into(),
                to_bin_id: self.to_bin_id.into(),
                bps_to_remove: self.bps_to_remove.into(),
            }
        }
    }
    use super::AddLiquidityOneSidePreciseIxAccounts;
    impl IntoProto<proto_def::AddLiquidityOneSidePreciseIxAccounts>
        for AddLiquidityOneSidePreciseIxAccounts
    {
        fn into_proto(self) -> proto_def::AddLiquidityOneSidePreciseIxAccounts {
            proto_def::AddLiquidityOneSidePreciseIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                user_token: self.user_token.to_string(),
                reserve: self.reserve.to_string(),
                token_mint: self.token_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityOneSidePreciseIxData;
    impl IntoProto<proto_def::AddLiquidityOneSidePreciseIxData> for AddLiquidityOneSidePreciseIxData {
        fn into_proto(self) -> proto_def::AddLiquidityOneSidePreciseIxData {
            proto_def::AddLiquidityOneSidePreciseIxData {
                bins: self.bins.into(),
                decompress_multiplier: self.decompress_multiplier.into(),
            }
        }
    }
    use super::GoToABinIxAccounts;
    impl IntoProto<proto_def::GoToABinIxAccounts> for GoToABinIxAccounts {
        fn into_proto(self) -> proto_def::GoToABinIxAccounts {
            proto_def::GoToABinIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                from_bin_array: self.from_bin_array.to_string(),
                to_bin_array: self.to_bin_array.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::GoToABinIxData;
    impl IntoProto<proto_def::GoToABinIxData> for GoToABinIxData {
        fn into_proto(self) -> proto_def::GoToABinIxData {
            proto_def::GoToABinIxData {
                bin_id: self.bin_id.into(),
            }
        }
    }
    use super::SetPreActivationDurationIxAccounts;
    impl IntoProto<proto_def::SetPreActivationDurationIxAccounts>
        for SetPreActivationDurationIxAccounts
    {
        fn into_proto(self) -> proto_def::SetPreActivationDurationIxAccounts {
            proto_def::SetPreActivationDurationIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                creator: self.creator.to_string(),
            }
        }
    }
    use super::SetPreActivationDurationIxData;
    impl IntoProto<proto_def::SetPreActivationDurationIxData> for SetPreActivationDurationIxData {
        fn into_proto(self) -> proto_def::SetPreActivationDurationIxData {
            proto_def::SetPreActivationDurationIxData {
                pre_activation_duration: self.pre_activation_duration.into(),
            }
        }
    }
    use super::SetPreActivationSwapAddressIxAccounts;
    impl IntoProto<proto_def::SetPreActivationSwapAddressIxAccounts>
        for SetPreActivationSwapAddressIxAccounts
    {
        fn into_proto(self) -> proto_def::SetPreActivationSwapAddressIxAccounts {
            proto_def::SetPreActivationSwapAddressIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                creator: self.creator.to_string(),
            }
        }
    }
    use super::SetPreActivationSwapAddressIxData;
    impl IntoProto<proto_def::SetPreActivationSwapAddressIxData> for SetPreActivationSwapAddressIxData {
        fn into_proto(self) -> proto_def::SetPreActivationSwapAddressIxData {
            proto_def::SetPreActivationSwapAddressIxData {
                pre_activation_swap_address: self.pre_activation_swap_address.into(),
            }
        }
    }
}
