//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use codama_renderers_rust_e2e_anchor::instructions::{
    CreateGuard as CreateGuardIxAccounts, CreateGuardInstructionArgs as CreateGuardIxData,
    Execute as ExecuteIxAccounts, ExecuteInstructionArgs as ExecuteIxData,
    Initialize as InitializeIxAccounts, UpdateGuard as UpdateGuardIxAccounts,
    UpdateGuardInstructionArgs as UpdateGuardIxData,
};
use codama_renderers_rust_e2e_anchor::ID;

/// WenTransferGuard Instructions
#[derive(Debug)]
pub enum WenTransferGuardProgramIx {
    CreateGuard(CreateGuardIxAccounts, CreateGuardIxData),
    Execute(ExecuteIxAccounts, ExecuteIxData),
    Initialize(InitializeIxAccounts),
    UpdateGuard(UpdateGuardIxAccounts, UpdateGuardIxData),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = WenTransferGuardProgramIx;

    fn id(&self) -> std::borrow::Cow<str> {
        "WenTransferGuard::InstructionParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<WenTransferGuardProgramIx> {
        let accounts_len = ix.accounts.len();
        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        match ix_discriminator {
            [251, 254, 17, 198, 219, 218, 154, 99] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = CreateGuardIxAccounts {
                    guard: ix.accounts[0].0.into(),
                    mint: ix.accounts[1].0.into(),
                    mint_token_account: ix.accounts[2].0.into(),
                    guard_authority: ix.accounts[3].0.into(),
                    payer: ix.accounts[4].0.into(),
                    associated_token_program: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                    system_program: ix.accounts[7].0.into(),
                };
                let de_ix_data: CreateGuardIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(WenTransferGuardProgramIx::CreateGuard(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            [105, 37, 101, 197, 75, 251, 102, 26] => {
                check_min_accounts_req(accounts_len, 7)?;
                let ix_accounts = ExecuteIxAccounts {
                    source_account: ix.accounts[0].0.into(),
                    mint: ix.accounts[1].0.into(),
                    destination_account: ix.accounts[2].0.into(),
                    owner_delegate: ix.accounts[3].0.into(),
                    extra_metas_account: ix.accounts[4].0.into(),
                    guard: ix.accounts[5].0.into(),
                    instruction_sysvar_account: ix.accounts[6].0.into(),
                };
                let de_ix_data: ExecuteIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(WenTransferGuardProgramIx::Execute(ix_accounts, de_ix_data))
            }
            [43, 34, 13, 49, 167, 88, 235, 235] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = InitializeIxAccounts {
                    extra_metas_account: ix.accounts[0].0.into(),
                    guard: ix.accounts[1].0.into(),
                    mint: ix.accounts[2].0.into(),
                    transfer_hook_authority: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                    payer: ix.accounts[5].0.into(),
                };
                Ok(WenTransferGuardProgramIx::Initialize(ix_accounts))
            }
            [51, 38, 175, 180, 25, 249, 39, 24] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = UpdateGuardIxAccounts {
                    guard: ix.accounts[0].0.into(),
                    mint: ix.accounts[1].0.into(),
                    token_account: ix.accounts[2].0.into(),
                    guard_authority: ix.accounts[3].0.into(),
                    token_program: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                };
                let de_ix_data: UpdateGuardIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(WenTransferGuardProgramIx::UpdateGuard(
                    ix_accounts,
                    de_ix_data,
                ))
            }
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        }
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use super::{InstructionParser, WenTransferGuardProgramIx};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    use yellowstone_vixen_core::proto::ParseProto;

    use super::CreateGuardIxAccounts;
    impl IntoProto<proto_def::CreateGuardIxAccounts> for CreateGuardIxAccounts {
        fn into_proto(self) -> proto_def::CreateGuardIxAccounts {
            proto_def::CreateGuardIxAccounts {
                guard: self.guard.to_string(),
                mint: self.mint.to_string(),
                mint_token_account: self.mint_token_account.to_string(),
                guard_authority: self.guard_authority.to_string(),
                payer: self.payer.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::CreateGuardIxData;
    impl IntoProto<proto_def::CreateGuardIxData> for CreateGuardIxData {
        fn into_proto(self) -> proto_def::CreateGuardIxData {
            proto_def::CreateGuardIxData {
                name: self.name,
                symbol: self.symbol,
                uri: self.uri,
                cpi_rule: self.cpi_rule.map(|x| x as i32),
                transfer_amount_rule: self.transfer_amount_rule.map(|x| x as i32),
                additional_fields_rule: self
                    .additional_fields_rule
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
            }
        }
    }
    use super::ExecuteIxAccounts;
    impl IntoProto<proto_def::ExecuteIxAccounts> for ExecuteIxAccounts {
        fn into_proto(self) -> proto_def::ExecuteIxAccounts {
            proto_def::ExecuteIxAccounts {
                source_account: self.source_account.to_string(),
                mint: self.mint.to_string(),
                destination_account: self.destination_account.to_string(),
                owner_delegate: self.owner_delegate.to_string(),
                extra_metas_account: self.extra_metas_account.to_string(),
                guard: self.guard.to_string(),
                instruction_sysvar_account: self.instruction_sysvar_account.to_string(),
            }
        }
    }
    use super::ExecuteIxData;
    impl IntoProto<proto_def::ExecuteIxData> for ExecuteIxData {
        fn into_proto(self) -> proto_def::ExecuteIxData {
            proto_def::ExecuteIxData {
                amount: self.amount,
            }
        }
    }
    use super::InitializeIxAccounts;
    impl IntoProto<proto_def::InitializeIxAccounts> for InitializeIxAccounts {
        fn into_proto(self) -> proto_def::InitializeIxAccounts {
            proto_def::InitializeIxAccounts {
                extra_metas_account: self.extra_metas_account.to_string(),
                guard: self.guard.to_string(),
                mint: self.mint.to_string(),
                transfer_hook_authority: self.transfer_hook_authority.to_string(),
                system_program: self.system_program.to_string(),
                payer: self.payer.to_string(),
            }
        }
    }
    use super::UpdateGuardIxAccounts;
    impl IntoProto<proto_def::UpdateGuardIxAccounts> for UpdateGuardIxAccounts {
        fn into_proto(self) -> proto_def::UpdateGuardIxAccounts {
            proto_def::UpdateGuardIxAccounts {
                guard: self.guard.to_string(),
                mint: self.mint.to_string(),
                token_account: self.token_account.to_string(),
                guard_authority: self.guard_authority.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::UpdateGuardIxData;
    impl IntoProto<proto_def::UpdateGuardIxData> for UpdateGuardIxData {
        fn into_proto(self) -> proto_def::UpdateGuardIxData {
            proto_def::UpdateGuardIxData {
                cpi_rule: self.cpi_rule.map(|x| x as i32),
                transfer_amount_rule: self.transfer_amount_rule.map(|x| x as i32),
                additional_fields_rule: self
                    .additional_fields_rule
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
            }
        }
    }

    impl IntoProto<proto_def::WenTransferGuardProgramIx> for WenTransferGuardProgramIx {
        fn into_proto(self) -> proto_def::WenTransferGuardProgramIx {
            match self {
                WenTransferGuardProgramIx::CreateGuard(acc, data) => {
                    proto_def::WenTransferGuardProgramIx {
                        ix_oneof: Some(
                            proto_def::wen_transfer_guard_program_ix::IxOneof::CreateGuard(
                                proto_def::CreateGuardIx {
                                    accounts: Some(acc.into_proto()),
                                    data: Some(data.into_proto()),
                                },
                            ),
                        ),
                    }
                }
                WenTransferGuardProgramIx::Execute(acc, data) => {
                    proto_def::WenTransferGuardProgramIx {
                        ix_oneof: Some(proto_def::wen_transfer_guard_program_ix::IxOneof::Execute(
                            proto_def::ExecuteIx {
                                accounts: Some(acc.into_proto()),
                                data: Some(data.into_proto()),
                            },
                        )),
                    }
                }
                WenTransferGuardProgramIx::Initialize(acc) => {
                    proto_def::WenTransferGuardProgramIx {
                        ix_oneof: Some(
                            proto_def::wen_transfer_guard_program_ix::IxOneof::Initialize(
                                proto_def::InitializeIx {
                                    accounts: Some(acc.into_proto()),
                                },
                            ),
                        ),
                    }
                }
                WenTransferGuardProgramIx::UpdateGuard(acc, data) => {
                    proto_def::WenTransferGuardProgramIx {
                        ix_oneof: Some(
                            proto_def::wen_transfer_guard_program_ix::IxOneof::UpdateGuard(
                                proto_def::UpdateGuardIx {
                                    accounts: Some(acc.into_proto()),
                                    data: Some(data.into_proto()),
                                },
                            ),
                        ),
                    }
                }
            }
        }
    }

    impl ParseProto for InstructionParser {
        type Message = proto_def::WenTransferGuardProgramIx;

        fn output_into_message(value: Self::Output) -> Self::Message {
            value.into_proto()
        }
    }
}
