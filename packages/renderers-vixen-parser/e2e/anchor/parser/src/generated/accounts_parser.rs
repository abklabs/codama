//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use codama_renderers_rust_e2e_anchor::accounts::GuardV1;
use codama_renderers_rust_e2e_anchor::ID;

/// WenTransferGuard Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
pub enum WenTransferGuardProgramState {
    GuardV1(GuardV1),
}

impl WenTransferGuardProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let data_len = data_bytes.len();
        const GUARDV1_LEN: usize = std::mem::size_of::<GuardV1>();
        match data_len {
            GUARDV1_LEN => Ok(WenTransferGuardProgramState::GuardV1(GuardV1::from_bytes(
                data_bytes,
            )?)),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account data length".to_owned(),
            )),
        }
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = WenTransferGuardProgramState;

    fn id(&self) -> std::borrow::Cow<str> {
        "wen_transfer_guard::AccountParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        WenTransferGuardProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use super::{AccountParser, WenTransferGuardProgramState};
    use crate::proto_def;
    use yellowstone_vixen_core::proto::ParseProto;

    use super::GuardV1;
    impl IntoProto<proto_def::GuardV1> for GuardV1 {
        fn into_proto(self) -> proto_def::GuardV1 {
            proto_def::GuardV1 {
                mint: self.mint.into(),
                bump: self.bump.into(),
                cpi_rule: self.cpi_rule.into(),
                transfer_amount_rule: self.transfer_amount_rule.into(),
                additional_fields_rule: self.additional_fields_rule.into(),
            }
        }
    }
}
