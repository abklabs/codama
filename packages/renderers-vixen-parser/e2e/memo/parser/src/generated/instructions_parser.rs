//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use codama_renderers_rust_e2e_memo::instructions::{
    AddMemo as AddMemoIxAccounts, AddMemoInstructionArgs as AddMemoIxData,
};
use codama_renderers_rust_e2e_memo::ID;

/// Memo Instructions
#[derive(Debug)]
pub enum MemoProgramIx {
    AddMemo(AddMemoIxAccounts, AddMemoIxData),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = MemoProgramIx;

    fn id(&self) -> std::borrow::Cow<str> {
        "Memo::InstructionParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<MemoProgramIx> {
        let accounts_len = ix.accounts.len();
        check_min_accounts_req(accounts_len, 0)?;
        let mut ix_data = &ix.data[..];
        let de_ix_data: AddMemoIxData = BorshDeserialize::deserialize(&mut ix_data)?;
        let ix_accounts = AddMemoIxAccounts {};
        Ok(MemoProgramIx::AddMemo(ix_accounts, de_ix_data))
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use super::{InstructionParser, MemoProgramIx};
    use crate::proto_def;
    use yellowstone_vixen_core::proto::ParseProto;

    use super::AddMemoIxAccounts;
    impl IntoProto<proto_def::AddMemoIxAccounts> for AddMemoIxAccounts {
        fn into_proto(self) -> proto_def::AddMemoIxAccounts {
            proto_def::AddMemoIxAccounts {}
        }
    }
    use super::AddMemoIxData;
    impl IntoProto<proto_def::AddMemoIxData> for AddMemoIxData {
        fn into_proto(self) -> proto_def::AddMemoIxData {
            proto_def::AddMemoIxData {
                memo: self.memo.into(),
            }
        }
    }
}
