//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use codama_renderers_rust_e2e_system::accounts::Nonce;
use codama_renderers_rust_e2e_system::ID;

/// System Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
pub enum SystemProgramState {
    Nonce(Nonce),
}

impl SystemProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let data_len = data_bytes.len();
        match data_len {
            Nonce::LEN => Ok(SystemProgramState::Nonce(Nonce::from_bytes(data_bytes)?)),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account data length".to_owned(),
            )),
        }
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = SystemProgramState;

    fn id(&self) -> std::borrow::Cow<str> {
        "system::AccountParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        SystemProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use super::{AccountParser, SystemProgramState};
    use crate::proto_def;
    use yellowstone_vixen_core::proto::ParseProto;

    use super::Nonce;
    impl IntoProto<proto_def::Nonce> for Nonce {
        fn into_proto(self) -> proto_def::Nonce {
            proto_def::Nonce {
                version: self.version.into(),
                state: self.state.into(),
                authority: self.authority.to_string(),
                blockhash: self.blockhash.to_string(),
                lamports_per_signature: self.lamports_per_signature.into(),
            }
        }
    }

    impl IntoProto<proto_def::SystemProgramState> for SystemProgramState {
        fn into_proto(self) -> proto_def::SystemProgramState {
            let state_oneof = match self {
                SystemProgramState::Nonce(data) => {
                    proto_def::system_program_state::StateOneof::Nonce(data.into_proto())
                }
            };

            proto_def::SystemProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::SystemProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message {
            value.into_proto()
        }
    }
}
